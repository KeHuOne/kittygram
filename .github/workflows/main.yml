name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  sast:
    name: 🔐 Static Application Security Testing (SAST)
    runs-on: ubuntu-latest

    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies (bandit, semgrep, PDF tools)
      run: |
        pip install bandit semgrep
        sudo apt update
        sudo apt install -y pandoc texlive-latex-base jq

    - name: 📂 Create reports directory
      run: mkdir -p reports

    - name: 🔍 Run Bandit
      run: |
        mkdir -p reports
        bandit -r backend/ --severity-level MEDIUM -f json -o reports/bandit-report.json || echo '{"results": []}' > reports/bandit-report.json


    - name: 🔍 Run Semgrep
      run: |
        semgrep --config=auto --json > reports/semgrep-report.json || true

    - name: 📝 Convert Bandit report to Markdown
      run: |
        echo "# 🐍 Bandit Report" > reports/bandit-report.md
        if [ -s reports/bandit-report.json ]; then
          jq -r '.results[] | "## \(.filename)\n- Line: \(.line)\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Issue: \(.issue_text)\n"' reports/bandit-report.json >> reports/bandit-report.md
        else
          echo "## ✅ No issues found" >> reports/bandit-report.md
        fi

    - name: 📝 Convert Semgrep report to Markdown
      run: |
        echo "# 📘 Semgrep Report" > reports/semgrep-report.md
        jq -r '.results[] | "## \(.path)\n- Line: \(.start.line)\n- Rule: \(.check_id)\n- Message: \(.extra.message)\n"' reports/semgrep-report.json >> reports/semgrep-report.md
    
    - name: 🛠 Install PDF tools
      run: |
       sudo apt update
       sudo apt install -y pandoc texlive-latex-base texlive-xetex texlive-fonts-recommended texlive-latex-recommended jq

    - name: 🖨 Convert Bandit Markdown to PDF
      run: |
        pandoc reports/bandit-report.md -o reports/bandit-report.pdf

    - name: 🖨 Convert Semgrep Markdown to PDF
      run: |
        pandoc reports/semgrep-report.md -o reports/semgrep-report.pdf

    - name: 📤 Upload all SAST reports
      uses: actions/upload-artifact@v4
      with:
        name: sast-reports
        path: reports/

  tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: 💾 Кэш зависимостей pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt

      - name: ✅ Run flake8 and Django tests
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_and_push_to_docker_hub:
    name: 🐳 Push Backend Docker Image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📤 Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: kehuone/kittygram_backend:latest

  frontend_tests:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 📦 Install dependencies
        run: |
          cd frontend/
          npm ci

      - name: ✅ Run frontend tests
        run: |
          cd frontend/
          npm run test

  build_frontend_and_push_to_docker_hub:
    name: 🐳 Push Frontend Docker Image
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📤 Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: kehuone/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: 🐳 Push Gateway Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📤 Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: kehuone/kittygram_gateway:latest

  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
      - sast
    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v3

      - name: 📤 Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "kittygram_final"

      - name: 🧩 Run remote deploy script via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd kittygram_final
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    name: 📣 Telegram Notification
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: 📬 Send message to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_KITTY_TO }}
          token: ${{ secrets.TELEGRAM_KITTY_TOKEN }}
          message: Деплой успешно выполнен! 🚀