name: Kittygram CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  sast:
    name: üîê SAST Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: ‚¨áÔ∏è Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üì¶ Install security tools
      run: |
        pip install bandit semgrep
        sudo apt update
        sudo apt install -y pandoc texlive-latex-base jq

    - name: üîç Run security scans
      run: |
        mkdir -p reports
        bandit -r backend/ --severity-level MEDIUM -f json -o reports/bandit-report.json || echo '{"results": []}' > reports/bandit-report.json
        semgrep --config=auto --json > reports/semgrep-report.json || true

    - name: üìù Generate reports
      run: |
        # Bandit report
        echo "# Bandit Report" > reports/bandit-report.md
        if [ -s reports/bandit-report.json ]; then
          jq -r '.results[] | "## \(.filename)\n- Line: \(.line)\n- Severity: \(.issue_severity)\n- Confidence: \(.issue_confidence)\n- Issue: \(.issue_text)\n"' reports/bandit-report.json >> reports/bandit-report.md
        else
          echo "## No issues found" >> reports/bandit-report.md
        fi
        
        # Semgrep report
        echo "# Semgrep Report" > reports/semgrep-report.md
        jq -r '.results[] | "## \(.path)\n- Line: \(.start.line)\n- Rule: \(.check_id)\n- Message: \(.extra.message)\n"' reports/semgrep-report.json >> reports/semgrep-report.md
        
        # Convert to PDF
        pandoc reports/bandit-report.md -o reports/bandit-report.pdf
        pandoc reports/semgrep-report.md -o reports/semgrep-report.pdf

    - name: üì§ Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: sast-reports
        path: reports/

  backend-tests:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: üíæ Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt

    - name: ‚úÖ Run tests
      env:
        POSTGRES_USER: kittygram_user
        POSTGRES_PASSWORD: kittygram_password
        POSTGRES_DB: kittygram
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test

  frontend-tests:
    name: üåê Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: üì¶ Install dependencies
      run: |
        cd frontend/
        npm ci

    - name: ‚úÖ Run tests
      run: |
        cd frontend/
        npm run test

  docker-build-push:
    name: üê≥ Build & Push Docker Images
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: backend
            context: ./backend/
            tag: kehuone/kittygram_backend:latest
          - name: frontend
            context: ./frontend/
            tag: kehuone/kittygram_frontend:latest
          - name: gateway
            context: ./nginx/
            tag: kehuone/kittygram_gateway:latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üß± Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: üîê Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üì§ Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.image.context }}
        push: true
        tags: ${{ matrix.image.tag }}

  security-checks:
    name: üîê Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üïµÔ∏è Run Gitleaks
      id: gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        args: detect --source=. --report-path=gitleaks-report.json --exit-code=0

    - name: üõ°Ô∏è Run Trivy
      id: trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        trivy config . --exit-code 0 --format json --output trivy-config-report.json

    - name: üì§ Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          gitleaks-report.json
          trivy-config-report.json

  dast:
    name: üì° DAST ZAP Scan
    runs-on: ubuntu-latest

    outputs:
      zap_warn: ${{ steps.zap_summary.outputs.warn }}
      zap_fail: ${{ steps.zap_summary.outputs.fail }}
      zap_pass: ${{ steps.zap_summary.outputs.pass }}

    steps:
    - name: üì° Run ZAP Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: 'http://185.121.13.20:9000'
        fail_action: false
        cmd_options: '-a -j'
        allow_issue_writing: false
        artifact_name: zap-reports

    - name: üìä Extract results
      id: zap_summary
      run: |
        sudo apt-get install -y jq
        WARN=$(jq '.site[0].alerts[] | select(.riskcode=="2")' report_json.json | wc -l)
        FAIL=$(jq '.site[0].alerts[] | select(.riskcode=="3")' report_json.json | wc -l)
        PASS=$(jq '.site[0].alerts' report_json.json | jq length)
        echo "warn=$WARN" >> $GITHUB_OUTPUT
        echo "fail=$FAIL" >> $GITHUB_OUTPUT
        echo "pass=$PASS" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy to VPS
    needs: [docker-build-push, sast, security-checks]
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì§ Copy docker-compose.yml
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "docker-compose.production.yml"
        target: "kittygram_final"

    - name: üöÄ Run deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd kittygram_final
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  notify:
    name: üì£ Notifications
    needs: [deploy, dast, security-checks]
    runs-on: ubuntu-latest

    steps:
    - name: üì¨ Send Telegram notifications
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_KITTY_TO }}
        token: ${{ secrets.TELEGRAM_KITTY_TOKEN }}
        message: |
          üöÄ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!
          
          üîê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
          - SAST: –û—Ç—á—ë—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
          - DAST: 
            ‚ö† Warnings: ${{ needs.dast.outputs.zap_warn }}
            üö´ Fails: ${{ needs.dast.outputs.zap_fail }}
            ‚úÖ Total Alerts: ${{ needs.dast.outputs.zap_pass }}
          - Gitleaks: ${{ needs.security-checks.outputs.gitleaks_warn || '0' }} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
          - Trivy: ${{ needs.security-checks.outputs.trivy_warn || '0' }} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π